/*
					-----------------------------------------------------
					|///////////////////////////////////////////////////|
					|///////////////////////////////////////////////////|
					|////                                           ////|
					|////          tAxI's ADVANCED HOUSING          ////|
                    |////                  SYSTEM                   ////|
					|////                                           ////|
					|////     COPYRIGHT: RELEASED UNDER the GNU     ////|
					|////                 LICENCE                   ////|
					|////                                           ////|
					|///////////////////////////////////////////////////|
					|///////////////////////////////////////////////////|
                    -----------------------------------------------------


    tAxI's Advanced House system - TSS System Extension Package for SA-MP Multiplayer Modification
    of Grand Theft Auto - San Andreas.

    Copyright (C) 2008  Chris Johnstone (tAxI/Necrioss)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>.

	-=============================================================================================-
	|=============================================================================================|
	|-----------------------------------------DESCRIPTION-----------------------------------------|
	|=============================================================================================|
	|THIS SYSTEM WILL ADD A HOUSING SYSTEM SIMILAR TO THAT OF PEN1 ONTO ANY SA-MP SERVER. IT      |
	|FEATURES HOUSE VEHICLES WITH PERMANENT MODSAVING, PERMANENT BUYING AND                       |
	|SELLING OF HOUSES, UP TO 250 HOUSES PER SERVER, HOUSE INTERIORS WITH INTERIOR SHARING VIA THE|
	|WORLD ID MANAGEMENT SYSTEM INCORPORATED, HOUSE LOCKING ETC, THINK OF IT AS PEN1 ONLY BETTER  |
 	|=============================================================================================|
	|NOTES:                                                                                       |
	|=============================================================================================|
	|THIS SYSTEM REQUIRES A SETUP FILE TO BE ENCORPORATED INTO YOUR SCRIPTFILES WITH APPROPRIATE  |
	|HOUSING INFORMATION CONTAINED WITHIN IT - WITHOUT THIS FILE THE SYSTEM WILL AUTOMATICALLY    |
	|THE LOADING PROCESS TO PREVENT GAMEMODE CRASHES. SEE THE README FILE INCLUDED IN THE DOWNLOAD|
	|FOR DETAILS ON HOW TO SET UP THIS FILE CORRECTLY WITH ALL OF THE APPROPRIATE INFORMATION     |
	|                                                                                             |
	|IT IS WORTH NOTING THAT THIS SYSTEM USES A STREAMER TO MANAGE EACH PLAYER'S INDIVIDUAL MAP   |
	|ICON USAGE AND ALLOWS UP TO 250 HOUSES TO BE INSTALLED ONTO THE CURRENT SYSTEM. EACH HOUSE IS|
	|REPRESENTED ON THE MINIMAP BY A GREEN HOUSE SYMBOL IF IT IS UNSOLD OR A RED HOUSE SYMBOL IF  |
	|IT IS SOLD                                                                                   |
	|=============================================================================================|
	|NATIVE AND AVAILLABLE COMMAND FUNCTIONS:                                                     |
	|=============================================================================================|

	native IsPlayerLoggedInHouseSystem(playerid)
	native IsVehicleHouseVehicle(vehicleid)
	native IsVehicleLinkedToHouse(vehicleid,houseid)
	native IsPlayerHouseOwner(playerid,houseid)
	native IsPlayerHouseVehicleOwner(playerid,vehicleid)
	native IsHouseLocked(houseid)
	native IsVehicleHouseVehicleLocked(houseid)
	native GetPlayerClosestHouse(playerid)
	native IsPlayerInRangeOfHouse(playerid,houseid,Float:max_range)
	native IsPlayerInAnyHouse(playerid)
	native GetPlayerCurrentHouse(playerid)
	native LogPlayerIntoHouseSystem(playerid)
	native LogPlayerOutOfHouseSystem(playerid)
	native SetSpawnAtHome(bool:toggle)
	native PutPlayerInHouse(playerid,houseid)
	native RemovePlayerFromHouse(playerid)
	native SetHouseLocked(houseid,bool:toggle)
	native SetHouseVehicleLocked(houseid,bool:toggle)
	native SetHouseVehicleAutoModForPlayer(playerid,bool:toggle)
	native LoadHouses()
	native SaveHouses()
	native CreateHouse(Float:enterx,Float:entery,Float:enterz,Float:intx,Float:inty,Float:intz,price,interior,intworld)
	native CreateHouseVehicle(houseid,model,Float:x,Float:y,Float:z,Float:rot,color1,color2)
	native SetHouseVehicleSpawnInfo(houseid,model,Float:x,Float:y,Float:z,Float:rot,color1,color2)
	native GetHouseSafeValue(houseid)
	native SetHouseSafeValue(houseid,value)
	native GetHouseCost(houseid)
	native SetHouseCost(houseid,cost)
	native GetHouseOwnerID(houseid)
	native GetHouseVehicleOwnerID(vehicleid)
	native GetHouseVehicleHouseID(vehicleid)
	native GetHouseVehicleStreamID(houseid)
	native GetHouseVehicleID(houseid)
	native SetHouseNotOwned(houseid)
	native MakePlayerHouseOwner(playerid,houseid)
	native SetHouseName(houseid,const name[])

	|=============================================================================================|
	-=============================================================================================-

*/

//=================SYSTEM REQUIRED DEFINES===================//

#define MAX_STRING_SIZE 256
#define DEFAULT_HOUSE_OWNER "[null]"
#define NEW_HOUSE_NAME "New House"
#define HOUSE_FILE "TSS_plugin_houses.cfg"
#define PLAYER_FILE_TEMPLATE "TSS_playerfile_%s.cfg"
#define MAX_HOUSE_VARIABLES 43
#define MAX_HOUSES 250
#define HOUSE_SOLD_ICON 32
#define HOUSE_UNSOLD_ICON 31
#define HOUSE_PU_TYPE 2
#define HOUSE_PICKUP 1272
#define SPLIT_SYMBOL ','

//===============SYSTEM VARIABLES **DO NOT TOUCH!!!!**==========================//

new spawnathouse = 0;
new housecount = 0;
new lastd[700];
new housev[700];

enum TPinfo
{
	name[MAX_STRING_SIZE],
	howner,
	howned,
	logged,
	inhouse,
	currenthouse,
	amodv,
}
new PlrInfo[MAX_SLOTS_tAxI][TPinfo];

enum THInfo
{
	//======Core House Variables======//
	hactive,
    hcost,
	howned,
	password[MAX_STRING_SIZE],
	description[MAX_STRING_SIZE],
  	howner[MAX_STRING_SIZE],
	Float:x_ent,
	Float:y_ent,
	Float:z_ent,
	Float:x_int,
	Float:y_int,
	Float:z_int,
	intworldid,
 	intid,
	mmid,
	puid,
	hsecure,
	hsafe,
	//======House Car Variables======//
	caractive,
	Float:vposx,
	Float:vposy,
	Float:vposz,
	Float:vposza,
	vsid,
	vmodel,
	vsecure,
	vvalue,
	//======House Car Mod Information======//
	vmod1,
	vmod2,
	vmod3,
	vmod4,
	vmod5,
	vmod6,
	vmod7,
	vmod8,
	vmod9,
	vmod10,
	vmod11,
	vmod12,
	vmod13,
	vmod14,
	vmod15,
	vmod16,
	vmod17,
	vcolor_1,
	vcolor_2,
	vpaintjob,
};
new HouseVar[MAX_HOUSES][THInfo];

//========SYSTEM FORWARDS========//

forward SpawnPlayerAtHouse(playerid);
forward HouseFileBackup();
forward Float:PlayerDistanceToHouse(playerid,houseid);

//============SYSTEM CORE PROCESSES ** NO FIDDLING WITH THESE!!! **==========//

//-------Credits to Dracoblue for these particular string based functions-------//

stock Set_Dest(dest[],source[]) {
	new count = strlen(source);
	new i=0;
	for (i=0;i<count;i++) {
		dest[i]=source[i];
	}
	dest[count]=0;
}

stock Memcpy_Ret(source[],index=0,numbytes) {
	new tmp[MAX_STRING_SIZE];
	new i=0;
	tmp[0]=0;
	if (index>=strlen(source)) return tmp;
	if (numbytes+index>=strlen(source)) numbytes=strlen(source)-index;
	if (numbytes<=0) return tmp;
	for (i=index;i<numbytes+index;i++) {
		tmp[i-index]=source[i];
		if (source[i]==0) return tmp;
	}
	tmp[numbytes]=0;
	return tmp;
}

stock String_Replace(trg[],newstr[],src[]) {
    new f=0;
    new s1[MAX_STRING_SIZE];
    new tmp[MAX_STRING_SIZE];
    format(s1,sizeof(s1),"%s",src);
    f = strfind(s1,trg);
    tmp[0]=0;
    while (f>=0) {
        strcat(tmp,Memcpy_Ret(s1, 0, f));
        strcat(tmp,newstr);
        format(s1,sizeof(s1),"%s",Memcpy_Ret(s1, f+strlen(trg), strlen(s1)-f));
        f = strfind(s1,trg);
    }
    strcat(tmp,s1);
    return tmp;
}

stock Encode_String(nickname[]) {
  new tmp[MAX_STRING_SIZE];
  Set_Dest(tmp,nickname);
  tmp=String_Replace("_","_00",tmp);
  tmp=String_Replace(";","_01",tmp);
  tmp=String_Replace("!","_02",tmp);
  tmp=String_Replace("/","_03",tmp);
  tmp=String_Replace("\\","_04",tmp);
  tmp=String_Replace("[","_05",tmp);
  tmp=String_Replace("]","_06",tmp);
  tmp=String_Replace("?","_07",tmp);
  tmp=String_Replace(".","_08",tmp);
  tmp=String_Replace("*","_09",tmp);
  tmp=String_Replace("<","_10",tmp);
  tmp=String_Replace(">","_11",tmp);
  tmp=String_Replace("{","_12",tmp);
  tmp=String_Replace("}","_13",tmp);
  tmp=String_Replace(" ","_14",tmp);
  tmp=String_Replace("\"","_15",tmp);
  tmp=String_Replace(":","_16",tmp);
  tmp=String_Replace("|","_17",tmp);
  tmp=String_Replace("=","_18",tmp);
  return tmp;
}

//-------End of Draco's Stuff-------//

stock CountHouses() {
    new File:HouseFile;
    new blank[MAX_STRING_SIZE];
    new count = 0;
    if (fexist(HOUSE_FILE)) {
        HouseFile = fopen(HOUSE_FILE);
        while(fread(HouseFile, blank, sizeof blank)) {
            count++;
        }
        fclose(HouseFile);
    }
    return count;
}

stock String_Split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

stock GetPlayerSector(playerid)
{
	new Float:pos[3];
	if(IsPlayerConnected(playerid)) {
		GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
		new xsec = floatround(((pos[0] +4000) / 500), floatround_floor);
		new ysec = floatround(((pos[1] +4000) / 500), floatround_floor);
		return (xsec * 16) + ysec;
	}
	return 999;
}

public Float:PlayerDistanceToHouse(playerid,houseid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	return floatsqroot(floatpower(HouseVar[houseid][x_ent] - x, 2) + floatpower(HouseVar[houseid][y_ent] - y, 2) + floatpower(HouseVar[houseid][z_ent] - z, 2));
}

stock GetHouseVehicleValue(houseid)
{
	new vehprice = 1500;
	new finalprice;
	if(HouseVar[houseid][vmod1] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod2] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod3] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod4] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod5] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod6] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod7] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod8] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod9] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod10] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod11] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod12] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod13] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod14] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod15] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod16] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vmod17] != 0) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vcolor_1] > -1 || HouseVar[houseid][vcolor_2] > -1) {finalprice = vehprice+100; vehprice = finalprice;}
	if(HouseVar[houseid][vpaintjob] > -1) {finalprice = vehprice+100; vehprice = finalprice;}
	return finalprice;
}

stock ModHouseVehicle(houseid)
{
	new tmp1 = HouseVar[houseid][vsid];
	new tmp2 = HouseVar[houseid][vmod1];
	new tmp3 = HouseVar[houseid][vmod2];
	new tmp4 = HouseVar[houseid][vmod3];
	new tmp5 = HouseVar[houseid][vmod4];
	new tmp6 = HouseVar[houseid][vmod5];
	new tmp7 = HouseVar[houseid][vmod6];
	new tmp8 = HouseVar[houseid][vmod7];
	new tmp9 = HouseVar[houseid][vmod8];
	new tmp10 = HouseVar[houseid][vmod9];
	new tmp11 = HouseVar[houseid][vmod10];
	new tmp12 = HouseVar[houseid][vmod11];
	new tmp13 = HouseVar[houseid][vmod12];
	new tmp14 = HouseVar[houseid][vmod13];
	new tmp15 = HouseVar[houseid][vmod14];
	new tmp16 = HouseVar[houseid][vmod15];
	new tmp17 = HouseVar[houseid][vmod16];
	new tmp18 = HouseVar[houseid][vmod17];
	new tmp19 = HouseVar[houseid][vpaintjob];
	if(tmp2 > 0) {AddStreamVehicleMod(tmp1,tmp2);}
	if(tmp3 > 0) {AddStreamVehicleMod(tmp1,tmp3);}
	if(tmp4 > 0) {AddStreamVehicleMod(tmp1,tmp4);}
	if(tmp5 > 0) {AddStreamVehicleMod(tmp1,tmp5);}
	if(tmp6 > 0) {AddStreamVehicleMod(tmp1,tmp6);}
	if(tmp7 > 0) {AddStreamVehicleMod(tmp1,tmp7);}
	if(tmp8 > 0) {AddStreamVehicleMod(tmp1,tmp8);}
	if(tmp9 > 0) {AddStreamVehicleMod(tmp1,tmp9);}
	if(tmp10 > 0) {AddStreamVehicleMod(tmp1,tmp10);}
	if(tmp11 > 0) {AddStreamVehicleMod(tmp1,tmp11);}
	if(tmp12 > 0) {AddStreamVehicleMod(tmp1,tmp12);}
	if(tmp13 > 0) {AddStreamVehicleMod(tmp1,tmp13);}
	if(tmp14 > 0) {AddStreamVehicleMod(tmp1,tmp14);}
	if(tmp15 > 0) {AddStreamVehicleMod(tmp1,tmp15);}
	if(tmp16 > 0) {AddStreamVehicleMod(tmp1,tmp16);}
	if(tmp17 > 0) {AddStreamVehicleMod(tmp1,tmp17);}
	if(tmp18 > 0) {AddStreamVehicleMod(tmp1,tmp18);}
	if(tmp19 > -1) {ChangeStreamVehiclePaintjob(tmp1,tmp19);}
}

stock GetDriverID(vehicleid)
{
    for(new i=0; i<200; i++) {
        if(IsPlayerConnected(i)) {
            if(IsPlayerInAnyVehicle(i)) {
                if(GetPlayerVehicleID(i) == vehicleid) {
					return i;
                }
            }
        }
    }
    return -1;
}

stock LoadPlayerFile(playerid)
{
    new fname[MAX_STRING_SIZE],playername[MAX_STRING_SIZE],filestring[MAX_STRING_SIZE];
    GetPlayerName(playerid,playername,sizeof(playername));
 	new SplitDiv[2][MAX_STRING_SIZE];
	new File: file;
 	format(fname,sizeof(fname),PLAYER_FILE_TEMPLATE,Encode_String(playername));
 	if(fexist(fname)) {
 	    file = fopen(fname, io_read);
		if (file) {
 			fread(file, filestring);
			String_Split(filestring, SplitDiv, SPLIT_SYMBOL);
			PlrInfo[playerid][howner] = strval(SplitDiv[0]);
			PlrInfo[playerid][howned] = strval(SplitDiv[1]);
			fclose(file);
		}
 	}
 	else {
 	    CreatePlayerFile(playerid);
 	}
}

stock SavePlayerFile(playerid)
{
    new fname[MAX_STRING_SIZE],playername[MAX_STRING_SIZE],filestring[MAX_STRING_SIZE];
	new File: file;
	GetPlayerName(playerid, playername, sizeof(playername));
 	format(fname,sizeof(fname),PLAYER_FILE_TEMPLATE,Encode_String(playername));
 	if(!fexist(fname)) {}
 	else {
	    file = fopen(fname, io_write);
	    if(file) {
  			format(filestring,sizeof(filestring),"%d,%d",PlrInfo[playerid][howner],PlrInfo[playerid][howned]);
   			fwrite(file,filestring);
	   		fclose(file);
		}
	}
}

stock CreatePlayerFile(playerid)
{
	new fname[MAX_STRING_SIZE],playername[MAX_STRING_SIZE];
	new File: file;
	GetPlayerName(playerid, playername, sizeof(playername));
 	format(fname,sizeof(fname),PLAYER_FILE_TEMPLATE,Encode_String(playername));
  	file = fopen(fname, io_write);
  	if(file) {
		fwrite(file,"0,0");
	}
	fclose(file);
	LoadPlayerFile(playerid);
}

stock CreateHouseFile()
{
	new File: file;
  	file = fopen(HOUSE_FILE, io_write);
  	if(file) {fwrite(file," ");}
	fclose(file);
}

public SpawnPlayerAtHouse(playerid)
{
	new houseid = PlrInfo[playerid][howned];
	SetPlayerPos(playerid,HouseVar[houseid][x_int],HouseVar[houseid][y_int],HouseVar[houseid][z_int]);
	SetPlayerInterior(playerid,HouseVar[houseid][intid]);
	SetPlayerVirtualWorld(playerid,HouseVar[houseid][intworldid]);
	PlrInfo[playerid][currenthouse] = houseid;
	PlrInfo[playerid][inhouse] = 1;
	SendClientMessage(playerid, TSS_GREEN, "Welcome back to your home.");
	return 1;
}

public HouseFileBackup()
{
	SaveHouseFile();
	for(new s=0; s<MAX_SLOTS_tAxI; s++) {
	    if(IsPlayerConnected(s) && PlrInfo[s][logged]) {
	        SavePlayerFile(s);
	    }
	}
}

stock GetVehiclehouseid(vehicleid)
{
    for(new s=0; s<MAX_HOUSES; s++) {
        if(HouseVar[s][vsid] == GetVehicleStreamID(vehicleid)) {
            return s;
        }
    }
    return 999;
}

stock ActivateHouse(houseid)
{
	if(HouseVar[houseid][hactive] == 1) {
	    return 0;
	}
    if(HouseVar[houseid][caractive] == 1) {
		HouseVar[houseid][vsid] = CreateStreamVehicle(HouseVar[houseid][vmodel],HouseVar[houseid][vposx],HouseVar[houseid][vposy],HouseVar[houseid][vposz],HouseVar[houseid][vposa],HouseVar[houseid][vcolor_2],HouseVar[houseid][vcolor_2]);
		ModHouseVehicle(houseid);
	}
	if(HouseVar[houseid][howned] == 1) {
		tmpicon = HOUSE_SOLD_ICON;
	}
	if(HouseVar[houseid][howned] == 0) {
		tmpicon = HOUSE_UNSOLD_ICON;
	}
	HouseVar[houseid][mmid] = CreateMapIcon(HouseVar[houseid][x_ent],HouseVar[houseid][y_ent],HouseVar[houseid][z_ent],tmpicon,175);
    HouseVar[houseid][hactive] = 1;
    return 1;
}
//====================NATIVES REQUIRED FOR SYSTEM TO START PROPERLY===================================

stock TSS_houses_OnPlayerStateChange(playerid, newstate)
{
	if(newstate == PLAYER_STATE_DRIVER) {
	    new string[MAX_STRING_SIZE];
		new houseid = GetVehiclehouseid(GetPlayerVehicleID(playerid));
		if (strcmp(HouseVar[houseid][howner],DEFAULT_HOUSE_OWNER,false) == 0) {
			if(HouseVar[houseid][vsecure] == 0) {
				SendClientMessage(playerid, TSS_BLUE, "This house vehicle is not currently owned by anyone.");
		    	return 1;
			}
		}
        if (strcmp(HouseVar[houseid][howner],PlrInfo[playerid][name],false) == 0) {
			if(HouseVar[houseid][vsecure] == 0) {
				SendClientMessage(playerid, TSS_GREEN, "Your house vehicle security system is currently deactivated.");
		    	return 1;
			}
	 		if(HouseVar[houseid][vsecure] == 1) {
				SendClientMessage(playerid, TSS_GREEN, "Your house vehicle security system is currently set to eject any intruders.");
		    	return 1;
			}
		}
		else {
		    if(HouseVar[houseid][vsecure] == 0) {
				format(string, sizeof(string), "%s has set their vehicle to allow anyone to use it. If you wreck it, you pay for repairs ($%d)",HouseVar[houseid][howner],HouseVar[houseid][vvalue]);
			}
	 		if(HouseVar[houseid][vsecure] == 1) {
				format(string, sizeof(string), "The owner of this vehicle (%s), has set the vehicle to eject intruders. Enjoy the walk!",HouseVar[houseid][howner]);
				RemovePlayerFromVehicle(playerid);
			}
			SendClientMessage(playerid,TSS_RED,string);
		}
	}
	return 1;
}

stock TSS_houses_OnVehicleDeath(vehicleid)
{
	housev[vehicleid] == 0;
	new houseid = GetVehiclehouseid(vehicleid);
   	new pmon = GetPlayerMoney(lastd[vehicleid])-HouseVar[houseid][vvalue];
   	new hmon = HouseVar[houseid][hsafe]+HouseVar[houseid][vvalue];
   	if(strcmp(HouseVar[houseid][howner],DEFAULT_HOUSE_OWNER,false) == 0) {
   	    SendClientMessage(lastd[vehicleid],TSS_RED,"Your lucky nobody owned that house vehicle you just destroyed. No charge...This Time!");
   	    return 1;
	}
   	if(strcmp(HouseVar[houseid][howner],PlrInfo[lastd[vehicleid]][name],false) == 0) {
   	    SendClientMessage(lastd[vehicleid],TSS_GREEN,"Your house vehicle will be returned to it's parking spot and repaired");
   	    return 1;
   	}
   	new string[MAX_STRING_SIZE];
   	format(string,sizeof(string),"You have been billed for the destruction of %s's house vehicle ($%d).",HouseVar[houseid][howner],HouseVar[houseid][vvalue]);
   	ResetPlayerMoney(lastd[vehicleid]);
   	GivePlayerMoney(lastd[vehicleid],pmon);
   	HouseVar[houseid][hsafe] = hmon;
   	SendClientMessage(lastd[vehicleid],TSS_RED,string);
   	return 1;
}

stock TSS_houses_OnPlayerSpawn(playerid)
{
	if(spawnathouse == 1 && PlrInfo[playerid][howner] == 1) {
	    SetTimerEx("SpawnPlayerAtHouse",750,0,"i",playerid);
	}
}

stock TSS_houses_OnGameModeInit()
{
	return 1;
}

stock TSS_houses_OnGameModeExit()
{
	return 1;
}

stock TSS_houses_OnPlayerPickUpPickup(playerid,pickupid)
{
    for(new s=0; s<MAX_HOUSES; s++) {
        if(HouseVar[s][puid] == pickupid) {
            new houseowner[MAX_STRING_SIZE],lockmes[MAX_STRING_SIZE];
            format(lockmes,256,"Unlocked");
            if(HouseVar[s][hsecure] == 1) {
                format(lockmes,256,"Locked");
            }
			format(houseowner,256,"%s",HouseVar[s][howner]);
			if(strcmp(HouseVar[s][howner],DEFAULT_HOUSE_OWNER,false) == 0) {
	    		format(houseowner,256,"<Still For Sale>");
			}
			new housemes[MAX_STRING_SIZE];
			format(housemes,256,"~n~~n~~r~Description: ~g~%s~n~~r~Price: ~g~$%d ~r~~n~~r~Owner: ~g~%s~n~~r~Security: ~g~%s",HouseVar[s][description],HouseVar[s][hcost],houseowner,lockmes);
    		GameTextForPlayer(playerid,housemes,5000,3);
			return 1;
        }
    }
    return 0;
}



stock TSS_houses_OnVehiclePaintjob(vehicleid,paintjobid)
{
    new playerid = GetDriverID(vehicleid);
    if(PlrInfo[playerid][amodv] == 1) {
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
    	    if (IsPlayerHouseVehicleOwner(playerid,vehicleid) == 1) {
				HouseVar[PlrInfo[playerid][howned]][vpaintjob] = paintjobid;
				HouseVar[PlrInfo[playerid][howned]][vvalue] = GetHouseVehicleValue(PlrInfo[playerid][howned]);
			}
		}
	}
}

stock TSS_houses_OnVehicleRespray(vehicleid,color1,color2)
{
    new playerid = GetDriverID(vehicleid);
    if(PlrInfo[playerid][amodv] == 1) {
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
    	    if (IsPlayerHouseVehicleOwner(playerid,vehicleid) == 1) {
				HouseVar[PlrInfo[playerid][howned]][vcolor_1] = color1;
    	        HouseVar[PlrInfo[playerid][howned]][vcolor_2] = color2;
    	        HouseVar[PlrInfo[playerid][howned]][vvalue] = GetHouseVehicleValue(PlrInfo[playerid][howned]);
			}
		}
	}
}

stock TSS_houses_OnVehicleMod(vehicleid,componentid
{
    new playerid = GetDriverID(vehicleid);
    if(PlrInfo[playerid][amodv] == 1) {
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
    	    if (IsPlayerHouseVehicleOwner(playerid,vehicleid) == 1) {
	    		for(new s=0; s<20; s++) {
   					if(componentid == spoiler[s][0]) {
   						HouseVar[PlrInfo[playerid][howned]][mod1] = componentid;
   	   				}
				}
				for(new s=0; s<3; s++) {
					if(componentid == nitro[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod2] = componentid;
    				}
				}
				for(new s=0; s<23; s++) {
					if(componentid == fbumper[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod3] = componentid;
    				}
				}
				for(new s=0; s<22; s++) {
					if(componentid == rbumper[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod4] = componentid;
	  				}
				}
				for(new s=0; s<28; s++) {
					if(componentid == exhaust[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod5] = componentid;
		     		}
				}
				for(new s=0; s<2; s++) {
					if(componentid == bventr[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod6] = componentid;
			   		}
				}
				for(new s=0; s<2; s++) {
					if(componentid == bventl[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod7] = componentid;
		   			}
				}
				for(new s=0; s<4; s++) {
					if(componentid == bscoop[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod8] = componentid;
					}
				}
				for(new s=0; s<13; s++) {
					if(componentid == rscoop[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod9] = componentid;
		   			}
				}
				for(new s=0; s<21; s++) {
					if(componentid == lskirt[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod10] = componentid;
		    		}
				}
				for(new s=0; s<21; s++) {
					if(componentid == rskirt[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod11] = componentid;
		   			}
				}
				for(new s=0; s<1; s++) {
					if(componentid == hydraulics[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod12] = componentid;
		    		}
				}
				for(new s=0; s<1; s++) {
					if(componentid == base[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod13] = componentid;
		    		}
				}
				for(new s=0; s<2; s++) {
					if(componentid == rbbars[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod14] = componentid;
		     		}
				}
				for(new s=0; s<2; s++) {
					if(componentid == fbbars[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod15] = componentid;
		     		}
				}
				for(new s=0; s<17; s++) {
					if(componentid == wheels[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod16] = componentid;
		    		}
				}
				for(new s=0; s<2; s++) {
					if(componentid == lights[s][0]) {
						HouseVar[PlrInfo[playerid][howned]][mod17] = componentid;
			  		}
				}
			    AddStreamVehicleMod(HouseVar[PlrInfo[playerid][howned]][vsid],componentid);
	    		return 1;
			}
		}
	}
	return 0;
}

stock TSS_houses_OnPlayerConnect(playerid)
{
	GetPlayerName(playerid, PlrInfo[playerid][name],256);
	LoadPlayerFile(playerid);
	PlrInfo[playerid][amodv] = 0;
	PlrInfo[playerid][logged] = 0;
	PlrInfo[playerid][inhouse] = 0;
	PlrInfo[playerid][currenthouse] = -1;
}

stock TSS_houses_OnPlayerDisconnect(playerid)
{
	if(PlrInfo[playerid][logged] == 1) {
		SavePlayerFile(playerid);
		SaveHouseFile();
	}
}

stock TSS_houses_OnPlayerEnterVehicle(playerid,vehicleid)
{
	lastd[vehicleid] = playerid;
}

TSS_houses_OnVehicleSpawn(vehicleid)
{
	housev[vehicleid] = 1;
}
//==================AVAILLABLE COMMAND FUNCTIONS FOR THE HOUSES================//

stock IsPlayerLoggedInHouseSystem(playerid)
{
	return PlrInfo[playerid][logged];
}

stock IsVehicleHouseVehicle(vehicleid)
{
    for(new i = 0;i<MAX_HOUSES;i++) {
        if(GetVehicleStreamID(vehicleid) == HouseVar[i][vsid]) {
            return 1;
        }
    }
    return 0;
}

stock IsVehicleLinkedToHouse(vehicleid,houseid)
{
	if(GetVehicleStreamID(vehicleid) == HouseVar[houseid][vsid] && HouseVar[houseid][hactive] == 1) {
	    return 1;
	}
	return 0;
}

stock IsPlayerHouseOwner(playerid,houseid)
{
	if(strcmp(HouseVar[houseid][howner],PlrInfo[playerid][name],false) == 0 && HouseVar[houseid][hactive] == 1) {
	    return 1;
	}
	return 0;
}

stock IsPlayerHouseVehicleOwner(playerid,vehicleid)
{
	if(PlrInfo[playerid][howner] == 1 && HouseVar[PlrInfo[playerid][howned]][vsid] == GetVehicleStreamID(vehicleid) && HouseVar[houseid][hactive] == 1) {
	    return 1;
	}
	return 0;
}

stock IsHouseLocked(houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	return HouseVar[houseid][hsecure];
}

stock IsVehicleHouseVehicleLocked(houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	return HouseVar[houseid][vsecure];
}

stock GetPlayerClosestHouse(playerid)
{
	new Float:dist,Float:tmp;
	new lowesthouse;
	dist = 9999.0;
    for(new i = 0;i<housecount;i++) {
        tmp = PlayerDistanceToHouse(playerid,i);
        if(tmp < dist) {
            dist = tmp;
            lowesthouse = i;
        }
	}
	return lowesthouse;
}

stock IsPlayerInRangeOfHouse(playerid,houseid,Float:max_range)
{
	if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
    new Float:ppos[3];
    GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
   	if (ppos[0] >= floatsub(HouseVar[houseid][x_ent], max_range) && ppos[0] <= floatadd(HouseVar[houseid][x_ent], max_range)
   	&& ppos[1] >= floatsub(HouseVar[houseid][y_ent], max_range) && ppos[1] <= floatadd(HouseVar[houseid][y_ent], max_range)
   	&& ppos[2] >= floatsub(HouseVar[houseid][z_ent], max_range) && ppos[2] <= floatadd(HouseVar[houseid][z_ent], max_range))
   	{
       	return 1;
   	}
	return 0;
}

stock IsPlayerInAnyHouse(playerid)
{
	return PlrInfo[playerid][inhouse];
}

stock GetPlayerCurrentHouse(playerid)
{
	return PlrInfo[playerid][currenthouse];
}

stock LogPlayerIntoHouseSystem(playerid)
{
	PlrInfo[playerid][logged] = 1;
	LoadPlayerFile(playerid);
	SetHouseVehicleAutoModForPlayer(playerid,true);
	return 1;
}

stock LogPlayerOutOfHouseSystem(playerid)
{
	PlrInfo[playerid][logged] = 0;
	return 1;
}

stock SetSpawnAtHome(bool:toggle)
{
	if(toggle == true) {
	    spawnathouse = 1;
	}
	else {
	    spawnathouse = 0;
	}
}

stock PutPlayerInHouse(playerid,houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
    SetPlayerPos(playerid,HouseVar[houseid][x_int],HouseVar[houseid][y_int],HouseVar[houseid][z_int]);
	SetPlayerInterior(playerid,HouseVar[houseid][intid]);
	SetPlayerVirtualWorld(playerid,HouseVar[houseid][intworldid]);
	PlrInfo[playerid][currenthouse] = houseid;
	PlrInfo[playerid][inhouse] = 1;
	if(IsPlayerHouseOwner(playerid,houseid) == 1) {
		return SendClientMessage(playerid, TSS_GREEN, "Welcome back to your home.");
	}
	return SendClientMessage(playerid, TSS_GREEN, "Welcome visitor.");
}

stock RemovePlayerFromHouse(playerid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	if(IsPlayerInAnyHouse(playerid) == 1) {
		new houseid = GetPlayerCurrentHouse(playerid);
		SetPlayerPos(playerid,HouseVar[houseid][x_ent],HouseVar[houseid][y_ent],HouseVar[houseid][z_ent]);
	    SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		PlrInfo[playerid][inhouse] = 0;
		PlrInfo[playerid][currenthouse] = -1;
	}
	return 1;
}

stock SetHouseLocked(houseid,bool:toggle)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	if(toggle == true) {
		HouseVar[houseid][hsecure] = 1;
	}
	else {
	    HouseVar[houseid][hsecure] = 0;
	}
}

stock SetHouseVehicleLocked(houseid,bool:toggle)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	if(toggle == true) {
		HouseVar[houseid][vsecure] = 1;
	}
	else {
	    HouseVar[houseid][vsecure] = 0;
	}
}

stock SetHouseVehicleAutoModForPlayer(playerid,bool:toggle)
{
	if(toggle == true) {
		PlrInfo[playerid][amodv] = 1;
	}
	else {
	    PlrInfo[playerid][amodv] = 0;
	}
}

stock LoadHouses()
{
    if(fexist(HOUSE_FILE)) {
        housecount = CountHouses();
    	SetTimer("HouseFileBackup",120000,1);
        new tmpicon;
        new SplitVar[MAX_HOUSE_VARIABLES][MAX_STRING_SIZE];
		new filestring[MAX_STRING_SIZE];
		new File: file = fopen(HOUSE_FILE, io_read);
		if (file) {
	    	for(new houseid = 0;houseid<housecount;houseid++)
			{
		    	fread(file, filestring);
				String_Split(filestring, SplitVar, SPLIT_SYMBOL);
				HouseVar[houseid][hcost] = strval(SplitVar[0]);
				HouseVar[houseid][howned] = strval(SplitVar[1]);
				strmid(HouseVar[houseid][password], SplitVar[2], 0, strlen(SplitVar[2]), 256);
				strmid(HouseVar[houseid][description], SplitVar[3], 0, strlen(SplitVar[3]), 256);
				strmid(HouseVar[houseid][howner], SplitVar[4], 0, strlen(SplitVar[4]), 256);
				HouseVar[houseid][x_ent] = floatstr(SplitVar[5]);
				HouseVar[houseid][y_ent] = floatstr(SplitVar[6]);
				HouseVar[houseid][z_ent] = floatstr(SplitVar[7]);
				HouseVar[houseid][x_int] = floatstr(SplitVar[8]);
				HouseVar[houseid][y_int] = floatstr(SplitVar[9]);
				HouseVar[houseid][z_int] = floatstr(SplitVar[10]);
				HouseVar[houseid][intworldid] = strval(SplitVar[11]);
 				HouseVar[houseid][intid] = strval(SplitVar[12]);
				HouseVar[houseid][hsecure] = strval(SplitVar[13]);
				HouseVar[houseid][vposx] = floatstr(SplitVar[14]);
				HouseVar[houseid][vposy] = floatstr(SplitVar[15]);
				HouseVar[houseid][vposz] = floatstr(SplitVar[16]);
				HouseVar[houseid][vposza] = floatstr(SplitVar[17]);
				HouseVar[houseid][vsid] = strval(SplitVar[18]);
				HouseVar[houseid][vmodel] = strval(SplitVar[19]);
				HouseVar[houseid][vsecure] = strval(SplitVar[20]);
				HouseVar[houseid][vmod1] = strval(SplitVar[21]);
				HouseVar[houseid][vmod2] = strval(SplitVar[22]);
				HouseVar[houseid][vmod3] = strval(SplitVar[23]);
				HouseVar[houseid][vmod4] = strval(SplitVar[24]);
				HouseVar[houseid][vmod5] = strval(SplitVar[25]);
				HouseVar[houseid][vmod6] = strval(SplitVar[26]);
				HouseVar[houseid][vmod7] = strval(SplitVar[27]);
				HouseVar[houseid][vmod8] = strval(SplitVar[28]);
				HouseVar[houseid][vmod9] = strval(SplitVar[29]);
				HouseVar[houseid][vmod10] = strval(SplitVar[30]);
				HouseVar[houseid][vmod11] = strval(SplitVar[31]);
				HouseVar[houseid][vmod12] = strval(SplitVar[32]);
				HouseVar[houseid][vmod13] = strval(SplitVar[33]);
				HouseVar[houseid][vmod14] = strval(SplitVar[34]);
				HouseVar[houseid][vmod15] = strval(SplitVar[35]);
				HouseVar[houseid][vmod16] = strval(SplitVar[36]);
				HouseVar[houseid][vmod17] = strval(SplitVar[37]);
				HouseVar[houseid][vcolor_1] = strval(SplitVar[38]);
				HouseVar[houseid][vcolor_2] = strval(SplitVar[39]);
				HouseVar[houseid][vpaintjob] = strval(SplitVar[40]);
				HouseVar[houseid][hsafe] = strval(SplitVar[41]);
				HouseVar[houseid][caractive] = strval(SplitVar[42]);
				HouseVar[houseid][vvalue] = GetHouseVehicleValue(houseid);
				ActivateHouse(houseid);
			}
		}
		fclose(file);
	}
	else {
	    CreateHouseFile();
		print("DEBUG :: TSS HOUSING SYSTEM ERROR! - HOUSE FILE NOT FOUND IN '/scriptfiles'. BLANK HOUSE FILE CREATED AND AWAITING INPUT...");
	}
}

stock SaveHouses()
{
	new filestring[MAX_STRING_SIZE];
	new File: hfile = fopen(HOUSE_FILE, io_write);
	for(new houseid = 0;houseid<housecount;houseid++)
 	{
		format(filestring, sizeof(filestring), "%d,%d,%s,%s,%s,%f,%f,%f,%f,%f,%f,%d,%d,%d,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		HouseVar[houseid][hcost],
		HouseVar[houseid][howned],
		HouseVar[houseid][password],
		HouseVar[houseid][description],
		HouseVar[houseid][howner],
		HouseVar[houseid][x_ent],
		HouseVar[houseid][y_ent],
		HouseVar[houseid][z_ent],
		HouseVar[houseid][x_int],
		HouseVar[houseid][y_int],
		HouseVar[houseid][z_int],
		HouseVar[houseid][intworldid],
		HouseVar[houseid][intid],
		HouseVar[houseid][hsecure],
		HouseVar[houseid][vposx],
		HouseVar[houseid][vposy],
		HouseVar[houseid][vposz],
		HouseVar[houseid][vposza],
		HouseVar[houseid][vsid],
		HouseVar[houseid][vmodel],
		HouseVar[houseid][vsecure],
		HouseVar[houseid][vmod1],
		HouseVar[houseid][vmod2],
		HouseVar[houseid][vmod3],
		HouseVar[houseid][vmod4],
		HouseVar[houseid][vmod5],
		HouseVar[houseid][vmod6],
		HouseVar[houseid][vmod7],
		HouseVar[houseid][vmod8],
		HouseVar[houseid][vmod9],
		HouseVar[houseid][vmod10],
		HouseVar[houseid][vmod11],
		HouseVar[houseid][vmod12],
		HouseVar[houseid][vmod13],
		HouseVar[houseid][vmod14],
		HouseVar[houseid][vmod15],
		HouseVar[houseid][vmod16],
		HouseVar[houseid][vmod17],
		HouseVar[houseid][vcolor_1],
		HouseVar[houseid][vcolor_2],
		HouseVar[houseid][vpaintjob],
		HouseVar[houseid][hsafe],
		HouseVar[houseid][caractive]
		);
		fwrite(hfile, filestring);
	}
	fclose(hfile);
	SetTimer("HouseFileBackup",120000,1);
}

Stock CreateHouse(Float:enterx,Float:entery,Float:enterz,Float:intx,Float:inty,Float:intz,price,interior,intworld)
{
	for(new houseid = 0;houseid<MAX_HOUSES;houseid++) {
	    if(HouseVar[houseid][hactive] == 0) {
	        HouseVar[houseid][hactive] = 1;
 		   	HouseVar[houseid][hcost] = price);
			HouseVar[houseid][howned] = 0);
			strmid(HouseVar[houseid][description], NEW_HOUSE_NAME, 0, strlen(NEW_HOUSE_NAME), 256);
			strmid(HouseVar[houseid][howner], DEFAULT_HOUSE_OWNER, 0, strlen(DEFAULT_HOUSE_OWNER), 256);
			HouseVar[houseid][x_ent] = enterx;
			HouseVar[houseid][y_ent] = entery;
			HouseVar[houseid][z_ent] = enterz;
			HouseVar[houseid][x_int] = intx);
			HouseVar[houseid][y_int] = inty);
			HouseVar[houseid][z_int] = intz);
			HouseVar[houseid][intworldid] = intworld;
 			HouseVar[houseid][intid] = interior;
			HouseVar[houseid][hsecure] = 0);
			HouseVar[houseid][hsafe] = 0);
			HouseVar[houseid][caractive] = 0);
			HouseVar[houseid][puid] = CreateStreamPickup(HOUSE_PICKUP,HOUSE_PU_TYPE,HouseVar[houseid][x_ent],HouseVar[houseid][y_ent],HouseVar[houseid][z_ent],0);
			HouseVar[houseid][mmid] = CreateMapIcon(HouseVar[houseid][x_ent],HouseVar[houseid][y_ent],HouseVar[houseid][z_ent],HOUSE_UNSOLD_ICON,175);
			housecount++;
			return 1;
		}
	}
}

stock CreateHouseVehicle(houseid,model,Float:x,Float:y,Float:z,Float:rot,color1,color2)
{
	if(HouseVar[houseid][hactive] == 1) {
	    HouseVar[houseid][vposx] = x;
		HouseVar[houseid][vposy] = y;
		HouseVar[houseid][vposz] = z;
		HouseVar[houseid][vposza] = rot;
		HouseVar[houseid][vmodel] = model;
		HouseVar[houseid][vsecure] = 0;
		HouseVar[houseid][vmod1] = 0;
		HouseVar[houseid][vmod2] = 0;
		HouseVar[houseid][vmod3] = 0;
		HouseVar[houseid][vmod4] = 0;
		HouseVar[houseid][vmod5] = 0;
		HouseVar[houseid][vmod6] = 0;
		HouseVar[houseid][vmod7] = 0;
		HouseVar[houseid][vmod8] = 0;
		HouseVar[houseid][vmod9] = 0;
		HouseVar[houseid][vmod10] = 0;
		HouseVar[houseid][vmod11] = 0;
		HouseVar[houseid][vmod12] = 0;
		HouseVar[houseid][vmod13] = 0;
		HouseVar[houseid][vmod14] = 0;
		HouseVar[houseid][vmod15] = 0;
		HouseVar[houseid][vmod16] = 0;
		HouseVar[houseid][vmod17] = 0;
		HouseVar[houseid][vcolor_1] = color1);
		HouseVar[houseid][vcolor_2] = color2;
		HouseVar[houseid][vpaintjob] = -1);
		HouseVar[houseid][caractive] = 1;
	    HouseVar[houseid][vsid] = CreateStreamVehicle(model,x,y,z,rot,color1,color2);
	    return 1;
	}
	return 0;
}

stock SetHouseVehicleSpawnInfo(houseid,model,Float:x,Float:y,Float:z,Float:rot,color1,color2)
{
	if(HouseVar[houseid][hactive] == 1 && HouseVar[houseid][caractive] == 1) {
	    HouseVar[houseid][vmodel] = model;
	    HouseVar[houseid][vcolor_1] = color1;
	    HouseVar[houseid][vcolor_2] = color2;
		HouseVar[houseid][vposx] = x;
		HouseVar[houseid][vposy] = y;
		HouseVar[houseid][vposz] = z;
		HouseVar[houseid][vposza] = rot;
		SetVehicleStreamSpawnInfo(HouseVar[houseid][vsid],HouseVar[houseid][vmodel],HouseVar[houseid][vposx],HouseVar[houseid][vposy],HouseVar[houseid][vposz],HouseVar[houseid][vposa],HouseVar[houseid][vcolor_1],HouseVar[houseid][vcolor_2);
	    return 1;
	}
	return 0;
}

stock GetHouseSafeValue(houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	return HouseVar[houseid][hsafe];
}

stock SetHouseSafeValue(houseid,value)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	HouseVar[houseid][hsafe] = value;
	return 1;
}

stock GetHouseCost(houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	return HouseVar[houseid][hcost];
}

stock SetHouseCost(houseid,cost)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	HouseVar[houseid][hcost] = cost;
	return 1;
}

stock GetHouseOwnerID(houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return -1;
	}
	if(strcmp(HouseVar[houseid][howner],DEFAULT_HOUSE_OWNER,false,24) == 0) {
		return -1;
	}
	for(new playerid = 0;playerid<MAX_SLOTS_tAxI;playerid++) {
	    if(IsPlayerConnected(playerid) {
    		if(PlrInfo[playerid][howner] == 1 && PlrInfo[playerid][howned] == houseid) {
				return playerid;
	    	}
		}
	}
	return -1;
}

stock IsHouseOwnerOnline(houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	if(strcmp(HouseVar[houseid][howner],DEFAULT_HOUSE_OWNER,false,24) == 0) {
		return 0;
	}
	for(new playerid = 0;playerid<MAX_SLOTS_tAxI;playerid++) {
	    if(IsPlayerConnected(playerid) {
    		if(PlrInfo[playerid][howner] == 1 && PlrInfo[playerid][howned] == houseid) {
				return 1;
	    	}
		}
	}
	return 0;
}

stock GetHouseVehicleOwnerID(vehicleid)
{
	new houseid,playername[256];
	new vstreamid = GetVehicleStreamID(vehicleid)
	for(new hid = 0;hid<housecount;hid++) {
	    if(HouseVar[hid][vsid] == vstreamid) {
	        houseid = hid;
	    }
	}
    if(HouseVar[houseid][hactive] == 0) {
		return -1;
	}
	if(strcmp(HouseVar[houseid][howner],DEFAULT_HOUSE_OWNER,false,24) == 0) {
		return -1;
	}
	for(new playerid = 0;playerid<MAX_SLOTS_tAxI;playerid++) {
	    if(IsPlayerConnected(playerid) {
	    	GetPlayerName(playerid,playername,256);
    		if(strcmp(HouseVar[houseid][howner],payername,false,24) == 0) {
				return playerid;
	    	}
		}
	}
	return -1;
}

stock GetHouseVehicleHouseID(vehicleid)
{
	new vstreamid = GetVehicleStreamID(vehicleid)
	for(new hid = 0;hid<housecount;hid++) {
	    if(HouseVar[hid][vsid] == vstreamid) {
	        return hid;
	    }
	}
    return -1
}

stock GetHouseVehicleStreamID(houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return -1;
	}
	return HouseVar[houseid][vsid];
}

stock GetHouseVehicleID(houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return -1;
	}
	if(VehicleInfo[HouseVar[houseid][vsid]][spawned] == 1) {
	    return VehicleInfo[HouseVar[houseid][vsid]][idnum];
	}
}

stock SetHouseNotOwned(houseid)
{
    if(HouseVar[houseid][hactive] == 0 || HouseVar[houseid][howned] == 0) {
		return 0;
	}
	HouseVar[houseid][howned] = 0;
	strmid(HouseVar[houseid][howner], DEFAULT_HOUSE_OWNER, 0, strlen(DEFAULT_HOUSE_OWNER), 256);
	if(IsHouseOwnerOnline(houseid) == 1) {
	    new playerid = GetHouseOwnerID(houseid);
	    PlrInfo[playerid][howner] = -1;
	    PlrInfo[playerid][howned] = 0;
	    return 1;
	}
	else {
	    new fname[MAX_STRING_SIZE],filestring[MAX_STRING_SIZE];
		new File: file;
 		format(fname,sizeof(fname),PLAYER_FILE_TEMPLATE,Encode_String(HouseVar[houseid][howner]));
 		if(!fexist(fname)) {}
 		else {
		    file = fopen(fname, io_write);
		    if(file) {
  				format(filestring,sizeof(filestring),"%d,%d",-1,0);
   				fwrite(file,filestring);
		   		fclose(file);
			}
		}
	}
}

stock MakePlayerHouseOwner(playerid,houseid)
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	HouseVar[houseid][howned] = 1;
	HouseVar[houseid][hsafe] = 0;
	strmid(HouseVar[houseid][howner], PlrInfo[playerid][name], 0, strlen(PlrInfo[playerid][name]), 256);
	PlrInfo[playerid][howner] = 1;
 	PlrInfo[playerid][howned] = houseid;
  	return 1;
}

stock SetHouseName(houseid,const name[])
{
    if(HouseVar[houseid][hactive] == 0) {
		return 0;
	}
	strmid(HouseVar[houseid][description], name, 0, strlen(name), 256);
	return 1;
}

